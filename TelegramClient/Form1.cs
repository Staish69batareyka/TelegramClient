using MyTgClient;
using TdLib;


namespace TelegramClient;

public partial class Form1 : Form
{
    private readonly Client _tg;
    private List<TdApi.Chat> _chats = new();
    private TdApi.Chat? _selectedChat;


    private ListView? _lstChats;
    private TextBox? _txtMessage;
    private Button? _btnSend;
    private TextBox? _txtHistory;
    private NotifyIcon? _notifyIcon;
    private ProgressBar? _progressBar;
    private Button _btnSendFile;

    public Form1(Client client)
    {
        InitializeComponent();
        _tg = client;
        _lstChats!.SelectedIndexChanged += lstChats_SelectedIndexChanged;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞
        try
        {
            LoadChatsAsync().ConfigureAwait(false); // –ó–∞–ø—É—Å–∫ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
        }
        catch (Exception ex)
        {
            MessageBox.Show($"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã: {ex.Message}");
        }

        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        _tg.NewMessageReceived += async message =>
        {
            try
            {
                await SafeInvokeAsync(async () =>
                {
                    if (_selectedChat != null && message.ChatId == _selectedChat.Id)
                    {
                        await LoadChatHistoryAsync(_selectedChat.Id);
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ –∏–ª–∏ —Å–≤—ë—Ä–Ω—É—Ç–æ
                    if (!this.Focused || this.WindowState == FormWindowState.Minimized)
                    {
                        string sender = message.SenderId is TdApi.MessageSender.MessageSenderUser user
                            ? $"User {user.UserId}"
                            : "System";

                        if (message.Content is TdApi.MessageContent.MessageText text)
                        {
                            ShowTrayNotification($"{sender}: {text.Text.Text}");
                        }
                        else
                        {
                            ShowTrayNotification($"{sender}: –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
                        }
                    }
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + ex.Message);
            }
        };

        _ = LoadChatsAsync();
    }


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    void ShowTrayNotification(string message)
    {
        if (_notifyIcon == null) return;

        _notifyIcon.BalloonTipTitle = "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ";
        _notifyIcon.BalloonTipText = message + " ";
        _notifyIcon.BalloonTipIcon = ToolTipIcon.Info;
        _notifyIcon.BalloonTipTitle = "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è";
        _notifyIcon.BalloonTipText = "–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è";
        _notifyIcon.ShowBalloonTip(5000);
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤
    private Task SafeInvokeAsync(Func<Task> action)
    {
        if (InvokeRequired)
        {
            var tcs = new TaskCompletionSource<object?>();

            BeginInvoke(async void () =>
            {
                try
                {
                    await action();
                    tcs.SetResult(null);
                }
                catch (Exception ex)
                {
                    tcs.SetException(ex);
                }
            });

            return tcs.Task;
        }
        else
        {
            return action();
        }
    }


    // –ü–æ–¥–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤
    private async Task LoadChatsAsync()
    {
        try
        {
            var chats = await _tg.GetChatsAsync();
            if (chats.Count == 0)
            {
                MessageBox.Show("–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
                return;
            }

            _chats = chats;
            _lstChats!.Items.Clear();
            foreach (var chat in _chats)
            {
                _lstChats.Items.Add(chat.Title);
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {ex.Message}");
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ NotifyIcon –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã
    protected override void OnFormClosed(FormClosedEventArgs e)
    {
        _notifyIcon!.Dispose();
        base.OnFormClosed(e);
    }


    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    private string FormatMessage(TdApi.Message message)
    {
        return message.Content switch
        {
            TdApi.MessageContent.MessageText text =>
                $"{text.Text.Text}",

            TdApi.MessageContent.MessageDocument doc =>
                $"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {doc.Document.FileName} ({doc.Document.Document_.ExpectedSize})",

            TdApi.MessageContent.MessagePhoto photo =>
                $"üì∑ –§–æ—Ç–æ ({photo.Photo.Sizes.Last().Photo.Id})",

            TdApi.MessageContent.MessageVideo video =>
                $"üé• –í–∏–¥–µ–æ ({video.Video.Duration} —Å–µ–∫)",

            _ => $" [–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è]"
        };
    }


    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    private async Task LoadChatHistoryAsync(long chatId)
    {
        var history = await _tg.GetChatHistoryAsync(chatId);
        
        _txtHistory!.Clear();

        // –°–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        foreach (var msg in history.AsEnumerable().Reverse())
        {
            string displayText = FormatMessage(msg);
            string sender = msg.SenderId is TdApi.MessageSender.MessageSenderUser user
                ? $"User {user.UserId}"
                : "System";

            _txtHistory.AppendText($"{sender}: {displayText}\r\n");
        }
    }


    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    private async void btnSend_Click(object sender, EventArgs e)
    {
        string message = _txtMessage!.Text.Trim();
        if (_selectedChat == null || string.IsNullOrEmpty(message))
        {
            MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
            return;
        }

        await _tg.SendMessageAsync(_selectedChat.Id, message);
        _txtMessage.Clear();
    }
    
    private async void btnSendFile_Click(object sender, EventArgs e)
    {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
            openFileDialog.Title = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏";
            openFileDialog.Filter = "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)|*.*";
            openFileDialog.Multiselect = false;

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFileDialog.FileName;

                try
                {
                    int index = _lstChats!.SelectedIndices[0];
                    if (index >= 0 && index < _chats.Count)
                    {
                        _ = _tg.SendFileAsync(_chats[index].Id,filePath);
                        MessageBox.Show("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
                    }
                   
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {ex.Message}");
                }
            }
        }
    }



    // –í—ã–±–æ—Ä —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    private async void lstChats_SelectedIndexChanged(object? sender, EventArgs e)
    {
        if (_lstChats!.SelectedIndices.Count == 0) return;
        
        int index = _lstChats!.SelectedIndices[0];

        if (index >= 0 && index < _chats.Count)
        {
            _selectedChat = _chats[index];
            _txtHistory!.Clear();
            _tg.SetCurrentChatId(_selectedChat.Id);
            await LoadChatHistoryAsync(_selectedChat.Id);
        }
    }


    private void Form1_DragEnter(object sender, DragEventArgs e)
    {
        if (e.Data != null && e.Data.GetDataPresent(DataFormats.FileDrop))
            e.Effect = DragDropEffects.Copy;
        else
            e.Effect = DragDropEffects.None;
    }

    private void ShowUploadProgress()
    {
        _progressBar!.Visible = true;
    }

    private void HideUploadProgress()
    {
        _progressBar!.Visible = false;
    }

    private async void Form1_DragDrop(object sender, DragEventArgs e)
    {
        if (e.Data == null)
            return;

        string[] files = (string[])e.Data.GetData(DataFormats.FileDrop)!;
        if (files.Length > 0)
        {
            string filePath = files[0]; // –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö
            ShowUploadProgress(); //  –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

            int index = _lstChats!.SelectedIndices[0];
            if (index >= 0 && index < _chats.Count)
            {
                _selectedChat = _chats[index];
                await _tg.SendFileAsync(_selectedChat.Id, filePath, "üìé –§–∞–π–ª");
            }

            HideUploadProgress(); // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        }
    }
}